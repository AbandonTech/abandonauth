datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = -1
}

model User {
  id                     String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username               String
  discord_account        DiscordAccount?
  github_account         GitHubAccount?
  google_account         GoogleAccount?
  developer_applications DeveloperApplication[]
  TestUser               TestUser[]

  @@unique([id, username])
}

model CallbackUri {
  id                       Int                  @id @default(autoincrement())
  uri                      String
  developer_application_id String               @db.Uuid
  developer_application    DeveloperApplication @relation(fields: [developer_application_id], references: [id], onDelete: Cascade)

  @@unique([developer_application_id, uri])
}

model DeveloperApplication {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  owner         User          @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id      String        @db.Uuid
  refresh_token String
  callback_uris CallbackUri[]
}

model DiscordAccount {
  id      BigInt @id
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @unique @db.Uuid
}

model GitHubAccount {
  id      Int    @id
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @unique @db.Uuid
}

model GoogleAccount {
  id      String @id
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @unique @db.Uuid
}

model TestUser {
  id            String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username      String
  password      String
  refresh_token String
  user          User   @relation(fields: [id, username], references: [id, username], onDelete: Cascade)
}
